using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Text.Json;

/// <summary>
/// Application to filter Twitter achive into a slimmer JSON with crud filtered out
/// Licenced under MIT license (see EOF comment)
/// Written by O. Westin http://microsff.com https://twitter.com/MicroSFF
/// </summary>
namespace FilterTwitterJson
{
    #region Generated JSON classes
    // These classes were generated by https://www.jsonutils.com/ based on examples from a Twitter archive

    /// <summary>
    /// Entities referenced in a tweet
    /// </summary>
    public class Entities
    {
        public IList<object> hashtags { get; set; }
        public IList<object> symbols { get; set; }
        public IList<UserMention> user_mentions { get; set; }
        public IList<object> urls { get; set; }
    }

    /// <summary>
    /// Details of a mentioned user
    /// </summary>
    public class UserMention
    {
        public string name { get; set; }
        public string screen_name { get; set; }
        public IList<string> indices { get; set; }
        public string id_str { get; set; }
        public string id { get; set; }
    }


    /// <summary>
    /// Contents of a tweet
    /// </summary>
    public class JsonTweet
    {
        public bool retweeted { get; set; }
        public string source { get; set; }
        public Entities entities { get; set; }
        public IList<string> display_text_range { get; set; }
        public string favorite_count { get; set; }
        public string in_reply_to_status_id_str { get; set; }
        public string id_str { get; set; }
        public string in_reply_to_user_id { get; set; }
        public bool truncated { get; set; }
        public string retweet_count { get; set; }
        public string id { get; set; }
        public string in_reply_to_status_id { get; set; }
        public string created_at { get; set; }
        public bool favorited { get; set; }
        public string full_text { get; set; }
        public string lang { get; set; }
        public string in_reply_to_screen_name { get; set; }
        public string in_reply_to_user_id_str { get; set; }

        /// <summary>
        /// DateTime of tweet creation, used for sorting and comparison
        /// </summary>
        public DateTime created_at_time
        {
            get
            {
                if (convertedDate.Equals(DateTime.MinValue))
                {
                    string format = "ddd MMM dd HH:mm:ss '+0000' yyyy";
                    convertedDate = DateTime.ParseExact(this.created_at, format, null);
                }
                return convertedDate;
            }
        }

        private DateTime convertedDate;
    }
    #endregion

    /// <summary>
    /// 
    /// </summary>
    class JsonReader
    {
        private static string ExtractTweetsFile(string zipPath)
        {
            string tempname = Path.GetTempFileName();
            System.IO.File.Delete(tempname);
            using (ZipArchive archive = ZipFile.OpenRead(zipPath))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    if (entry.Name.Contains("tweet.js"))
                    {
                        entry.ExtractToFile(tempname);
                        return tempname;
                    }
                }
            }
            return "";
        }

        public static List<JsonTweet> ReadJsonFile(string filePathName)
        {
            using (var fileStream = File.OpenRead(filePathName))
            {
                using (TextReader sr = new StreamReader(fileStream, Encoding.UTF8))
                {
                    // Read past the JS variable name
                    int ch = sr.Peek();
                    while (ch != -1)
                    {
                        if ((char)ch == '[')
                            break;
                        sr.Read();
                        ch = sr.Peek();
                    }
                    string jsonString = sr.ReadToEnd();
                    List<JsonTweet> tweets = JsonSerializer.Deserialize<List<JsonTweet>>(jsonString);
                    // Sort by date, descending
                    tweets.Sort((x, y) => x.created_at_time.CompareTo(y.created_at_time));
                    return tweets;
                }
            }
        }

        public static List<JsonTweet> ReadArchiveFile(string zipPathName)
        {
            string tempName = ExtractTweetsFile(zipPathName);
            if (!string.IsNullOrEmpty(tempName))
            {
                List<JsonTweet> tweets = ReadJsonFile(tempName);
                File.Delete(tempName);
                return tweets;
            }
            return new List<JsonTweet>();
        }
    }
}
/*
Copyright 2020 O. Westin 

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

Except as contained in this notice, the name(s) of the above copyright holders
shall not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
THE SOFTWARE.
*/
